{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","filteredItems","filter","selectedItems","find","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAIqBA,mLACR,IAAAC,EACiDC,KAAKC,MAApDC,EADFH,EACEG,KAAMC,EADRJ,EACQI,aAAcC,EADtBL,EACsBK,aAAeC,EADrCN,EACqCM,SAC1C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUN,GACZE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAGrBH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOF,UAAU,eAAeG,YAAY,kBAAkBC,MAAOX,EAAMY,SAAUX,KAErGG,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAWJ,EAAW,iCAAiC,kCACxEA,EAAW,YAAc,qBAfXU,aCAlBC,mLACR,IAAAjB,EACuCC,KAAKC,MAA1CgB,EADFlB,EACEkB,MAAQC,EADVnB,EACUmB,aAAeC,EADzBpB,EACyBoB,WAC9B,OACIb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uEACVH,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAoBW,QAASD,GAAYb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBACtEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBW,QAASF,GAAcZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BARrDM,aCCjBM,mLACR,IAAAtB,EACmDC,KAAKC,MAAtDqB,EADFvB,EACEuB,MAAQC,EADVxB,EACUwB,UAAYL,EADtBnB,EACsBmB,aAAeC,EADrCpB,EACqCoB,WAC1C,OAEIb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,kBAGIa,EAAME,IAAI,SAAAtB,GACN,OACII,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAKxB,EAAKyB,GACpBV,MAAOf,EAAKe,MACZC,aAAc,kBAAIA,EAAahB,EAAKyB,KACpCR,WAAY,kBAAIA,EAAWjB,EAAKyB,SAK5CrB,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,gDAAgDW,QAASG,GAAzF,sBAnBsBR,aC6FvBa,6MAtFZC,MAAM,CACJP,MAAM,GACNK,GAAGG,MACH5B,KAAK,GACLG,UAAS,KAGXF,aAAe,SAAC4B,GACdC,EAAKC,SAAS,CACZ/B,KAAK6B,EAAEG,OAAOrB,WAIlBT,aAAe,SAAC2B,GACdA,EAAEI,iBAEF,IAAMC,EAAQ,CACZT,GAAGK,EAAKH,MAAMF,GACdV,MAAMe,EAAKH,MAAM3B,MAGbmC,EAAY,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAOP,EAAKH,MAAMP,OAAlB,CAAwBc,IAE1CJ,EAAKC,SAAS,CACZX,MAAMe,EACNnC,KAAK,GACLyB,GAAGG,MACHzB,UAAS,OAIbkB,UAAY,WACVS,EAAKC,SAAS,CACZX,MAAM,QAIVJ,aAAe,SAACS,GACd,IAAMc,EAAgBT,EAAKH,MAAMP,MAAMoB,OAAO,SAAAxC,GAAI,OAAIA,EAAKyB,KAAMA,IACjEK,EAAKC,SAAS,CACZX,MAAMmB,OAIVtB,WAAa,SAACQ,GACb,IAAMc,EAAgBT,EAAKH,MAAMP,MAAMoB,OAAO,SAAAxC,GAAI,OAAIA,EAAKyB,KAAMA,IAC3DgB,EAAgBX,EAAKH,MAAMP,MAAMsB,KAAK,SAAA1C,GAAI,OAAIA,EAAKyB,KAAMA,IAC/DK,EAAKC,SAAS,CACZX,MAAMmB,EACNvC,KAAKyC,EAAc1B,MACnBZ,UAAS,EACTsB,GAAGA,6EAQL,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,yBAEFH,EAAAC,EAAAC,cAACqC,EAAD,CACA3C,KAAMF,KAAK6B,MAAM3B,KACjBC,aAAcH,KAAKG,aACnBC,aAAcJ,KAAKI,aACnBC,SAAUL,KAAK6B,MAAMxB,WAErBC,EAAAC,EAAAC,cAACsC,EAAD,CACAxB,MAAOtB,KAAK6B,MAAMP,MAClBC,UAAWvB,KAAKuB,UAChBL,aAAclB,KAAKkB,aACnBC,WAAYnB,KAAKmB,uBA5ERJ,aCCCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cae0b7e3.chunk.js","sourcesContent":["/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n        const {item, handleChange, handleSubmit , editItem} = this.props;\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i className=\"fas fa-book\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Add a todo item\" value={item} onChange={handleChange}/>\r\n                    </div>\r\n                    <button type=\"submit\" className={editItem ? \"btn btn-block btn-success mt-3\":\"btn btn-block btn-primary mt-3\"}>\r\n                        {editItem ? 'Edit item' : 'Add item'}</button>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n    render() {\r\n        const {title , handleDelete , handleEdit} = this.props;\r\n        return (\r\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                <h6>{title}</h6>\r\n                <div className=\"todo-icon\">\r\n                    <span className=\"mx-2 text-success\" onClick={handleEdit}><i className=\"fas fa-pen\"></i></span>\r\n                    <span className=\"mx-2 text-danger\" onClick={handleDelete}><i className=\"fas fa-trash\"></i></span>\r\n                </div>\r\n            </li>\r\n          \r\n        );\r\n    }\r\n}\r\n","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\r\n\r\nimport React, { Component } from 'react'\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class TodoList extends Component {\r\n    render() {\r\n        const {items , clearList , handleDelete , handleEdit} = this.props;\r\n        return (\r\n            \r\n            <ul className=\"list-group my-5\">\r\n                <h3 className=\"text-capitalize text-center\">Your Todo list</h3>\r\n\r\n                {\r\n                    items.map(item =>{\r\n                        return(\r\n                            <TodoItem key={item.id} \r\n                            title={item.title}\r\n                            handleDelete={()=>handleDelete(item.id)}\r\n                            handleEdit={()=>handleEdit(item.id)}/>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                <button type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\" onClick={clearList}>Clear List</button>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n","/*########################### This code is written by Norhan El-Deeb @2019 #########################*/\n\n\nimport React, { Component } from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\n\n class App extends Component {\n   state={\n     items:[],\n     id:uuid(),\n     item:\"\",\n     editItem:false\n   }\n   \n   handleChange = (e)=>{\n     this.setState({\n       item:e.target.value\n     });\n   }\n\n   handleSubmit = (e)=>{\n     e.preventDefault();\n\n     const newItem={\n       id:this.state.id,\n       title:this.state.item\n     }\n\n     const updatedItems = [...this.state.items,newItem];\n\n     this.setState({\n       items:updatedItems,\n       item:'',\n       id:uuid(),\n       editItem:false\n     })\n   };\n\n   clearList = ()=>{\n     this.setState({\n       items:[]\n     })\n   };\n\n   handleDelete = (id) =>{\n     const filteredItems = this.state.items.filter(item => item.id !==id)\n     this.setState({\n       items:filteredItems\n     });\n   }\n\n   handleEdit = (id) =>{\n    const filteredItems = this.state.items.filter(item => item.id !==id)\n    const selectedItems = this.state.items.find(item => item.id ===id)\n    this.setState({\n      items:filteredItems,\n      item:selectedItems.title,\n      editItem:true,\n      id:id \n    });\n\n   }\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Enter your Todos here</h3>\n\n          <TodoInput \n          item={this.state.item} \n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          editItem={this.state.editItem} />\n\n          <TodoList \n          items={this.state.items}\n          clearList={this.clearList}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit} />\n\n          </div>\n        </div>\n      </div>\n     \n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}